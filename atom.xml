<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>算法初学者</title>
  
  <subtitle>平凡的平淡</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lixiansen2048.github.io/"/>
  <updated>2019-07-23T06:41:06.777Z</updated>
  <id>https://lixiansen2048.github.io/</id>
  
  <author>
    <name>李艳祥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode第 46 题：全排列</title>
    <link href="https://lixiansen2048.github.io/2019/07/23/leetcode-79th/"/>
    <id>https://lixiansen2048.github.io/2019/07/23/leetcode-79th/</id>
    <published>2019-07-23T02:33:38.000Z</published>
    <updated>2019-07-23T06:41:06.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-回溯法专题"><a href="#LeetCode-回溯法专题" class="headerlink" title="LeetCode 回溯法专题"></a>LeetCode 回溯法专题</h1><hr><h3 id="题目来源：LeetCode-第-46-题"><a href="#题目来源：LeetCode-第-46-题" class="headerlink" title="题目来源：LeetCode 第 46 题"></a>题目来源：<a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">LeetCode 第 46 题</a></h3><blockquote><p><strong>回溯法</strong> 是一种在探索尝试的过程中来找出所有解的算法。当确定这个候选解不满足求解条件时，就’回溯’返回，尝试其他路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术就叫回溯法。</p></blockquote><h6 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token keyword">def</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                output<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                    backtrack<span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span>                    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>                    p<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        used <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        backtrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode-回溯法专题&quot;&gt;&lt;a href=&quot;#LeetCode-回溯法专题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 回溯法专题&quot;&gt;&lt;/a&gt;LeetCode 回溯法专题&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;题目来源：LeetCod
      
    
    </summary>
    
      <category term="leetcode 题解" scheme="https://lixiansen2048.github.io/categories/leetcode-%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="回溯法" scheme="https://lixiansen2048.github.io/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
      <category term="python 3" scheme="https://lixiansen2048.github.io/tags/python-3/"/>
    
      <category term="数组" scheme="https://lixiansen2048.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
